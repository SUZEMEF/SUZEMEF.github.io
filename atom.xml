<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SUZEMEF</title>
  
  <subtitle>Just Another Weblog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suzemef.github.io/"/>
  <updated>2020-11-19T01:38:52.141Z</updated>
  <id>http://suzemef.github.io/</id>
  
  <author>
    <name>SUZEMEF</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>抖音自动点赞</title>
    <link href="http://suzemef.github.io/2020/11/16/douyin-auto-thumbup/"/>
    <id>http://suzemef.github.io/2020/11/16/douyin-auto-thumbup/</id>
    <published>2020-11-16T08:04:00.000Z</published>
    <updated>2020-11-19T01:38:52.141Z</updated>
    
    <content type="html"><![CDATA[<p>因为一些主播会把点赞达到多少万作为一项指标，自己又懒得点，所以想把这个工作给自动化。</p><p>现在可以搜到的实现基本都是基于adb的，这是一个简陋的整合了相关资料的win下的教学。</p><p>其原理为：直接使用adb的点击事件速度会不够快，可以通过记录用户操作再输出的方式模拟在dy主播界面快速点击的行为。</p><a id="more"></a><ol><li><p>下载一个安卓模拟器（本文使用夜神模拟器）并安装，完成安装后在模拟器内安装dy，登录已经关注主播的抖音账号，并进入直播页面</p></li><li><p>通过命令行进入nox_adb.exe所在目录（命令为默认安装位置）：cd “C:\Program Files (x86)\Nox\bin&quot;</p></li><li><p>进入夜神模拟器的adb shell：nox_adb shell</p></li><li><p>进入shell后，准备记录输入操作到一个新建的recordtap文件内：dd if=/dev/input/event5 of=/sdcard/recordtap，具体是event5或其他（如event1等）可在shell中通过getevent命令查询</p></li><li><p>回到模拟器的直播页面，在屏幕上重复快速点击</p></li><li><p>退出adb shell（如快捷键无效，可关掉命令行窗口后重开）</p></li><li><p>重新进入adb shell，运行命令（此为循环100次版本）：   </p><p> for i in <code>seq 1 100</code>; do dd if=/sdcard/recordtap of=/dev/input/event5;sleep 0.1; done </p></li><li><p>多开时直接执行nox_adb shell会报 error: more than one device and emulator的错误，这时需要先nox_adb devices查看当前有设备与模拟器：</p><p> C:\Program Files (x86)\Nox\bin&gt;nox_adb devices<br> List of devices attached<br> 127.0.0.1:62025 device<br> 127.0.0.1:62001 device</p></li><li><p>在执行adb命令时，为命令指定设备的序列号<code>nox_adb -s 127.0.0.1:62025 shell</code></p></li></ol><p>说明：</p><p>使用夜神安卓模拟器的ADB指令时，需要将adb改为nox_adb，如nox_adb devices对应adb devices，nox_adb shell对应adb shell。</p><p>参考：</p><p><a href="https://www.jianshu.com/p/7c565eab821d" target="_blank" rel="noopener">https://www.jianshu.com/p/7c565eab821d</a></p><p><a href="https://blog.csdn.net/gaojinshan/article/details/9455193" target="_blank" rel="noopener">https://blog.csdn.net/gaojinshan/article/details/9455193</a></p><p><a href="https://www.yeshen.com/faqs/ByPpRoflZ" target="_blank" rel="noopener">https://www.yeshen.com/faqs/ByPpRoflZ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为一些主播会把点赞达到多少万作为一项指标，自己又懒得点，所以想把这个工作给自动化。&lt;/p&gt;
&lt;p&gt;现在可以搜到的实现基本都是基于adb的，这是一个简陋的整合了相关资料的win下的教学。&lt;/p&gt;
&lt;p&gt;其原理为：直接使用adb的点击事件速度会不够快，可以通过记录用户操作再输出的方式模拟在dy主播界面快速点击的行为。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://SUZEMEF.github.io/categories/coding/"/>
    
    
      <category term="android" scheme="http://SUZEMEF.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Jav快捷跳转：历史版本</title>
    <link href="http://suzemef.github.io/2020/09/27/video-search-through-javlibrary-change-log/"/>
    <id>http://suzemef.github.io/2020/09/27/video-search-through-javlibrary-change-log/</id>
    <published>2020-09-27T02:15:00.000Z</published>
    <updated>2020-11-19T01:38:52.133Z</updated>
    
    <content type="html"><![CDATA[<p>为了便于直观的查看更新记录，今后会在这里维护一份<a href="https://sleazyfork.org/zh-CN/scripts/377603" target="_blank" rel="noopener">Jav快捷跳转</a>的<a href="https://keepachangelog.com/en/1.0.0/" target="_blank" rel="noopener">Changelog</a>。</p><a id="more"></a><h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><h2 id="0-30-2020-09-09"><a href="#0-30-2020-09-09" class="headerlink" title="[0.30] - 2020-09-09"></a>[0.30] - 2020-09-09</h2><h3 id="Fixed"><a href="#Fixed" class="headerlink" title="Fixed"></a>Fixed</h3><ul><li>修复了JavDB获取到错误番号的bug。</li></ul><h2 id="0-29-2020-08-06"><a href="#0-29-2020-08-06" class="headerlink" title="[0.29] - 2020-08-06"></a>[0.29] - 2020-08-06</h2><h3 id="Added"><a href="#Added" class="headerlink" title="Added"></a>Added</h3><ul><li>添加对JavDB的支持（需求来源： 蚍蜉）。</li></ul><h2 id="0-28-2020-07-04"><a href="#0-28-2020-07-04" class="headerlink" title="[0.28] - 2020-07-04"></a>[0.28] - 2020-07-04</h2><h3 id="Added-1"><a href="#Added-1" class="headerlink" title="Added"></a>Added</h3><ul><li>加入javbus的防屏蔽地址。</li></ul><h2 id="0-27-2020-07-04"><a href="#0-27-2020-07-04" class="headerlink" title="[0.27] - 2020-07-04"></a>[0.27] - 2020-07-04</h2><h3 id="Removed"><a href="#Removed" class="headerlink" title="Removed"></a>Removed</h3><ul><li>去掉了失效的thisjav。</li></ul><h3 id="Fixed-1"><a href="#Fixed-1" class="headerlink" title="Fixed"></a>Fixed</h3><ul><li>根据fanza1的反馈除虫。</li></ul><h2 id="0-26-2019-05-17"><a href="#0-26-2019-05-17" class="headerlink" title="[0.26] - 2019-05-17"></a>[0.26] - 2019-05-17</h2><h3 id="Changed"><a href="#Changed" class="headerlink" title="Changed"></a>Changed</h3><ul><li>调整JAVLibrary的跳转样式（需求:由 还没想好 于 2019-05-03 发表）。</li></ul><h2 id="0-25-2019-03-03"><a href="#0-25-2019-03-03" class="headerlink" title="[0.25] - 2019-03-03"></a>[0.25] - 2019-03-03</h2><h3 id="Added-2"><a href="#Added-2" class="headerlink" title="Added"></a>Added</h3><ul><li>添加JAVLibrary到JAV321的跳转。</li></ul><h2 id="0-24-2019-02-28"><a href="#0-24-2019-02-28" class="headerlink" title="[0.24] - 2019-02-28"></a>[0.24] - 2019-02-28</h2><h3 id="Added-3"><a href="#Added-3" class="headerlink" title="Added"></a>Added</h3><ul><li>增加Jav321到其他站点的跳转</li></ul><h2 id="0-23-2019-02-24"><a href="#0-23-2019-02-24" class="headerlink" title="[0.23] - 2019-02-24"></a>[0.23] - 2019-02-24</h2><h3 id="Added-4"><a href="#Added-4" class="headerlink" title="Added"></a>Added</h3><ul><li>增加从ThisJav影片页面跳转到对应影片在JavLibrary评分页面的链接。</li></ul><h3 id="Fixed-2"><a href="#Fixed-2" class="headerlink" title="Fixed"></a>Fixed</h3><ul><li>修复无法匹配p26y.com的bug。</li></ul><h2 id="0-22-2019-02-22"><a href="#0-22-2019-02-22" class="headerlink" title="[0.22] - 2019-02-22"></a>[0.22] - 2019-02-22</h2><h3 id="Added-5"><a href="#Added-5" class="headerlink" title="Added"></a>Added</h3><ul><li>增加从JavBus影片页面跳转到对应影片在JavLibrary评分页面的链接。</li></ul><h2 id="0-21-2019-02-17"><a href="#0-21-2019-02-17" class="headerlink" title="[0.21] - 2019-02-17"></a>[0.21] - 2019-02-17</h2><h3 id="Added-6"><a href="#Added-6" class="headerlink" title="Added"></a>Added</h3><ul><li>增加Sukubei支持。</li></ul><h2 id="0-2-2019-02-17"><a href="#0-2-2019-02-17" class="headerlink" title="[0.2] - 2019-02-17"></a>[0.2] - 2019-02-17</h2><h3 id="Changed-1"><a href="#Changed-1" class="headerlink" title="Changed"></a>Changed</h3><ul><li>优化代码，调整显示效果及元属性，更新附加信息。</li></ul><h2 id="0-1-2019-02-10"><a href="#0-1-2019-02-10" class="headerlink" title="[0.1] - 2019-02-10"></a>[0.1] - 2019-02-10</h2><h3 id="Added-7"><a href="#Added-7" class="headerlink" title="Added"></a>Added</h3><ul><li>初始化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了便于直观的查看更新记录，今后会在这里维护一份&lt;a href=&quot;https://sleazyfork.org/zh-CN/scripts/377603&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jav快捷跳转&lt;/a&gt;的&lt;a href=&quot;https://keepachangelog.com/en/1.0.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Changelog&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://SUZEMEF.github.io/categories/coding/"/>
    
    
      <category term="userscript" scheme="http://SUZEMEF.github.io/tags/userscript/"/>
    
  </entry>
  
  <entry>
    <title>acme.sh的Verify error:Invalid response from报错</title>
    <link href="http://suzemef.github.io/2020/08/24/acme-verify-error/"/>
    <id>http://suzemef.github.io/2020/08/24/acme-verify-error/</id>
    <published>2020-08-24T08:49:00.000Z</published>
    <updated>2020-11-19T01:38:52.141Z</updated>
    
    <content type="html"><![CDATA[<p>之前在hostdare购入过一台VPS，速度一般，所以拿来做备胎，乱七八糟部了一些服务在上面，考虑到最低限度的安全，用acme给每个服务都手动生成了一遍证书，还挺麻烦的（当时因为一些原因，通配符证书没能用起来……）。</p><p>其中最常用的一个自用服务是freshrss，今天访问时突然发现证书过期了，按说acme是可以自动续期的。查了一下<code>acme.sh.log</code>，报了一条这个错误：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Mon Aug 24 00:09:56 CST 2020] yousite.xyz:Verify error:Invalid response from https:&#x2F;&#x2F;yousite.xyz&#x2F;.well-known&#x2F;acme-challenge&#x2F;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [*.*.*.*]: 404</span><br></pre></td></tr></table></figure><p>说明acme是有在自动去更新证书的，但是到verify这一步时会通不过。查了一下，发现项目里面有一条issue：<a href="https://github.com/acmesh-official/acme.sh/issues/132" target="_blank" rel="noopener" title="Verify error:Invalid response #132">Verify error:Invalid response #132</a>里有解答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同样遇到这个问题，如果是nginx的话，一般是因为服务器拒绝访问，解决方法2个，都是为了获取访问权限：</span><br><span class="line"></span><br><span class="line">1.在include *.conf; 下方加入部分代码：</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">server_name yoursite.com www.yoursite.com;</span><br><span class="line"></span><br><span class="line">include *.conf;      &#x2F;&#x2F; 加入以下代码；</span><br><span class="line"></span><br><span class="line">       location ^~ &#x2F;.well-known&#x2F;acme-challenge&#x2F; </span><br><span class="line">    &#123;</span><br><span class="line">        default_type &quot;text&#x2F;plain&quot;;</span><br><span class="line">        root  &#x2F;home&#x2F;wwwroot&#x2F;yoursite;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location &#x3D; &#x2F;.well-known&#x2F;acme-challenge&#x2F; </span><br><span class="line">    &#123;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">2.在 yoursite.conf 中，把拒绝访问代码注释掉，如下：</span><br><span class="line"></span><br><span class="line">        #  location ~ &#x2F;\.</span><br><span class="line">        #  &#123;</span><br><span class="line">        #      deny all;</span><br><span class="line">        #  &#125;</span><br></pre></td></tr></table></figure><p>我的nginx把各服务的配置单独放在了新建的<code>\etc\nginx\conf\conf.d\xxx.conf</code>，所以这里<code>location</code>部分要放到<code>xxx.conf</code>下，后续要做的就是重新加载nginx的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;nginx&#x2F;sbin</span><br><span class="line">.&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure><p>为了验证配置是否生效，这里更新了一下acme之后做了一次证书手动更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.acme.sh&#x2F;</span><br><span class="line">acme.sh --upgrade</span><br><span class="line">acme.sh --renew  -d domain.com</span><br></pre></td></tr></table></figure><p>这次签发成功了，于是又水了一贴（部分信息做了脱敏处理）……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在hostdare购入过一台VPS，速度一般，所以拿来做备胎，乱七八糟部了一些服务在上面，考虑到最低限度的安全，用acme给每个服务都手动生成了一遍证书，还挺麻烦的（当时因为一些原因，通配符证书没能用起来……）。&lt;/p&gt;
&lt;p&gt;其中最常用的一个自用服务是freshrss，今天访问时突然发现证书过期了，按说acme是可以自动续期的。查了一下&lt;code&gt;acme.sh.log&lt;/code&gt;，报了一条这个错误：&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://SUZEMEF.github.io/categories/coding/"/>
    
    
      <category term="VPS" scheme="http://SUZEMEF.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>我搭静态博客</title>
    <link href="http://suzemef.github.io/2020/05/27/the-way-I-build-a-static-blog/"/>
    <id>http://suzemef.github.io/2020/05/27/the-way-I-build-a-static-blog/</id>
    <published>2020-05-27T13:59:00.000Z</published>
    <updated>2020-11-19T01:38:52.141Z</updated>
    
    <content type="html"><![CDATA[<p>动态博客其实一直以来都很吸引我。事实上不久之前，我还在自己的VPS上搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。</p><p>做出这个决定有一个重要的理由——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，我的目的也仅止于记录自己的一些想法和兴趣，不会有更大的野心。因此权衡下来我更倾向于选择一个具有性价比的方案。</p><a id="more"></a><p>话虽如此，并不代表静态博客就完美无缺。相反，一些在动态博客中根本不能称之为问题的问题，在静态博客上就得通过各种“奇技淫巧”来解决。</p><p>因此本文基于hexo聊一聊在搭建过程中需要注意的点，同类型的生成器如pelican在使用中基本上围绕的也都是这些问题。</p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>现在流行的做法通过Travis CI自动部署github page，基本上都遵循如下步骤：</p><ol><li><p>新建一个<code>username.github.io</code>仓库，在github的<code>Settings - Developer settings - Personal access tokens</code>页面内为Travis CI新建一个github page专用，并赋予repo权限的access token；</p></li><li><p>使用github账号登陆Travis CI以完成账号关联，将access token作为<code>GH_TOKEN</code>加入到从github同步过去的仓库配置中，并在Travis CI中启用该仓库。</p></li><li><p>在本地安装npm、hexo。初始化hexo项目后，为本地项目添加.travis.yml，并完成_config.yml、.gitignore等相关配置；</p></li><li><p>为<code>username.github.io</code>新建一个<code>source</code>分支，将本地项目推送到这个source分支下。最终目的是让Travis CI根据source分支下.travis.yml中的设置的步骤生成静态文件，并把静态文件推送到<code>username.github.io</code>的<code>master</code>分支下。</p></li></ol><p>这部分的教程其实相当多了，如<a href="https://segmentfault.com/a/1190000021987832" target="_blank" rel="noopener" title="Travis CI 加 Hexo 实现自动构建部署 Github Pages 博客">1</a>。在实际搭建时，可以根据自己的情况进行调整，并不需要照搬教程。</p><h2 id="主题开发"><a href="#主题开发" class="headerlink" title="主题开发"></a>主题开发</h2><p>如果你使用了比较成熟的主题，但又希望做一些个性化的定制，比较好的一种方式是把这个主题fork到自己的github账号下。并在本地环境中拉取fork的主题。这样做之后，本地的开发环境将会有两个仓库：</p><ul><li><p><code>username.github.io</code>的<code>source</code>分支</p></li><li><p><code>hexo-theme-themename</code>的<code>master</code>分支</p></li></ul><p>由于主题是一个独立分支，因此在自动部署时，一般会把<code>source</code>下的themes文件夹加入到这个分支的<code>.gitignore</code>里去，避免发生一些可能的修改冲突。</p><p>使用时，则通过在.travis.yml添加<code>git clone</code>命令引入主题并渲染，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before_script:</span><br><span class="line">  - npm install -g hexo-cli </span><br><span class="line">  - mkdir themes</span><br><span class="line">  - git clone https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;hexo-theme-themename.git themes&#x2F;themename</span><br><span class="line"></span><br><span class="line">script: </span><br><span class="line">  - hexo generate</span><br></pre></td></tr></table></figure><h2 id="评论服务选型"><a href="#评论服务选型" class="headerlink" title="评论服务选型"></a>评论服务选型</h2><p>对动态博客来说几乎属于标配的评论功能，在静态博客上就得通过各种奇奇怪怪的方案去实现，并且往往还并不完美。我目前使用的主题minos支持的几种评论服务，就各自存在一些缺点：</p><h3 id="disqus"><a href="#disqus" class="headerlink" title="disqus"></a>disqus</h3><p>国内网络环境下的访问实在是太慢了，非常影响浏览体验。</p><ul><li><p>一种方式是把disqus隐藏在一个按钮中，相当于用户只有在点击该评论按钮后才会加载disqus，属于一个治标不治本的方案。</p></li><li><p>如果坚持使用disqus，可以考虑参考<a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/#Disqus-Lazyload" target="_blank" rel="noopener" title="使 Disqus 不再拖累性能和页面加载">2</a>，但我个人感觉还是会有拖慢。</p></li></ul><h3 id="gitment-gitalk"><a href="#gitment-gitalk" class="headerlink" title="gitment/gitalk"></a>gitment/gitalk</h3><p>单独为这类评论服务建一个存放issue仓库倒还不是最麻烦的地方，最麻烦的是每篇博文好像都得手动加issue，虽然github也有网友写了脚本完成这一工作，但易用性还是大大降低了。</p><p>另外gitment已经停止更新，一些常见问题如<a href="https://github.com/imsun/gitment/issues/100" target="_blank" rel="noopener" title="总是提示 [object XMLHttpRequestProgressEvent] #100">object XMLHttpRequestProgressEvent</a>、<a href="https://github.com/imsun/gitment/issues/178" target="_blank" rel="noopener" title="hexo博客的gitment评论开启一直失败">hexo上的开启失败</a>等只能通过网友提供的各种方案加以解决，这一点也十分劝退我。</p><h3 id="isso"><a href="#isso" class="headerlink" title="isso"></a>isso</h3><p>使用体验最好的一个，但并没有选用他。这实际上涉及的是一个理念问题：isso需要自行搭建，也就是说又得放在VPS上，那为什么不直接选用一个自带评论的动态博客方案呢，和我搭静态博客的出发点相矛盾。当然，对于不介意这点的朋友，这个服务还是推荐的。</p><h3 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h3><p>目前这个博客上部署的方案，没有上面一些比较恶心的问题。但leancloud这个服务能坚持多久是比较让我担心的地方……</p><p>综上所述，可以看到静态博客的评论实在是一大痛点。虽然有各种各样的解决方案，但始终只能算马马虎虎能用，难以达到动态博客的使用体验。</p><h2 id="搜索引擎收录及SEO优化"><a href="#搜索引擎收录及SEO优化" class="headerlink" title="搜索引擎收录及SEO优化"></a>搜索引擎收录及SEO优化</h2><p>目前google的网址前缀收录的推荐方式是通过校验html来完成，步骤可参考<a href="https://kennyliblog.nctu.me/2019/06/24/Google-search-Hexo-Blog/" target="_blank" rel="noopener" title="實作 - 讓 Google 能搜尋到自己的 Hexo Blog">5</a>，SEO优化方面的文章也很多，如<a href="https://juejin.im/post/5ae7fc18518825672565a7f0#heading-4" target="_blank" rel="noopener" title="Hexo 个人博客 SEO 优化（3）：改造你的博客，提升搜索引擎排名">6</a>，这里就不再赘述了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>完成这些内容后，你的静态博客相当于拥有了基本的功能。后续包括<a href="https://dengcb.com/zh/hexo-minos-multi-language/" target="_blank" rel="noopener" title="用Minos搭建Hexo全站多语言站点">全站多语言支持</a>、<a href="https://blog.skk.moe/post/img-lazyload-hexo/" target="_blank" rel="noopener" title="图片 lazyload 的学问和在 Hexo 上的最佳实践">图片懒加载</a>等等，都是可以持续优化的方面。</p><p>当然，对于一个博客来说，最重要的永远是内容。希望大家不要被各种花俏的技巧蒙蔽了双眼，为了搭博客而搭博客。而是通过搭博客培养兴趣和动手能力，在兴趣驱动下，继续分享自己的思考与创意😁</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态博客其实一直以来都很吸引我。事实上不久之前，我还在自己的VPS上搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。&lt;/p&gt;
&lt;p&gt;做出这个决定有一个重要的理由——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，我的目的也仅止于记录自己的一些想法和兴趣，不会有更大的野心。因此权衡下来我更倾向于选择一个具有性价比的方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://SUZEMEF.github.io/categories/coding/"/>
    
    
      <category term="hexo" scheme="http://SUZEMEF.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://suzemef.github.io/2020/05/23/hello-world/"/>
    <id>http://suzemef.github.io/2020/05/23/hello-world/</id>
    <published>2020-05-23T16:00:00.000Z</published>
    <updated>2020-11-19T01:38:52.133Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
