{"pages":[{"title":"有的没的","text":"希望这次能坚持久一点。 你可以在这些地方找到我： https://github.com/SUZEMEF https://sleazyfork.org/zh-CN/scripts/377603 更新历史2020-09-04 哇，电脑重装之后又得搭一遍环境，好烦。2020-08-27 字体加载有点问题，调优中……2020-05-26 调整minos配色及字体，如果你喜欢我修改的这个版本，欢迎fork。2020-05-25 评论服务选用Valine。生成并提交sitemap以完成收录。2020-05-24 完成初步搭建。主题使用minos，通过Travis CI完成自动化部署。","link":"/about/index.html"}],"posts":[{"title":"acme.sh的Verify error:Invalid response from报错","text":"之前在hostdare购入过一台VPS，速度一般，所以拿来做备胎，乱七八糟部了一些服务在上面，考虑到最低限度的安全，用acme给每个服务都手动生成了一遍证书，还挺麻烦的（当时因为一些原因，通配符证书没能用起来……）。 其中最常用的一个自用服务是freshrss，今天访问时突然发现证书过期了，按说acme是可以自动续期的。查了一下acme.sh.log，报了一条这个错误： 1[Mon Aug 24 00:09:56 CST 2020] yousite.xyz:Verify error:Invalid response from https://yousite.xyz/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [*.*.*.*]: 404 说明acme是有在自动去更新证书的，但是到verify这一步时会通不过。查了一下，发现项目里面有一条issue：Verify error:Invalid response #132里有解答： 12345678910111213141516171819202122232425262728293031同样遇到这个问题，如果是nginx的话，一般是因为服务器拒绝访问，解决方法2个，都是为了获取访问权限：1.在include *.conf; 下方加入部分代码：server {listen 80;server_name yoursite.com www.yoursite.com;include *.conf; // 加入以下代码； location ^~ /.well-known/acme-challenge/ { default_type &quot;text/plain&quot;; root /home/wwwroot/yoursite; } location = /.well-known/acme-challenge/ { try_files $uri =404; } 2.在 yoursite.conf 中，把拒绝访问代码注释掉，如下： # location ~ /\\. # { # deny all; # } 我的nginx把各服务的配置单独放在了新建的\\etc\\nginx\\conf\\conf.d\\xxx.conf，所以这里location部分要放到xxx.conf下，后续要做的就是重新加载nginx的配置： 12cd /etc/nginx/sbin./nginx -s reload 为了验证配置是否生效，这里更新了一下acme之后做了一次证书手动更新。 123cd ~/.acme.sh/acme.sh --upgradeacme.sh --renew -d domain.com 这次签发成功了，于是又水了一贴（部分信息做了脱敏处理）……","link":"/2020/08/24/acme-verify-error/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/23/hello-world/"},{"title":"聊聊Yoga S740","text":"Yoga S740从4月份入手后到现在已经使用了近5个月了，这里想简单聊聊自己的一些使用上的体验。 在没有考虑换机之前，我手上服役的机器还是一台13年购买的Dell Vostro系列。这台机器的硬盘、风扇甚至于键盘C面和D壳都已经被我换了个遍，可能就还剩屏幕没有动过。以为修修补补还可以坚持一段时间，但在数不清是第几次漏电之后，我终于还是受不了了。 决定购机之后，我开始分析自己的需求，大体有以下几点： 能做中度的视频剪辑和渲染 可以玩得动文明6或者欧陆风云4 内存16G，便于开虚拟机；硬盘512G起步 屏幕大小在14寸以内，厚度小于2cm 可以180度开合 接口不能太简陋，得基本够用 较长的续航 不要太贵（笑 …… 1中度的视频剪辑和游戏都对CPU有一定要求，不能太菜了，不然每次还得开远程连家里的电脑做剪辑，太麻烦。内存16G是为了能多开几个虚拟机。14寸以内也基本限定只能在轻薄本里挑。180度开合算是我个人一个喜好吧，我觉得这样摊开之后插显示器比较方便。 当时只是在脑海里粗略地列了一下，但基本是冲着这个方向去选机的。其实现在想想十分后悔，应该直接换Macbook Pro，本来Win系列本也已经用到有点吐了，但最后还是没有走出这一步，果然还是穷。 在各种奇奇怪怪的要求的引导下走进我视野的就是这台S740了。各种测评都有提到它的各种优点： 3733Mhz的板载LPDDR4X内存，算是当前市面上笔记本所使用的最高频内存了 一块DC调光、72%NTSC、400nits的屏幕，素质相当好，并且这块屏是LTPS的低功耗屏，搭配62Wh的大容量电池，续航表现很不错 使用10代CPU，性能释放表现好 满血雷电3接口，WiFi6无线网卡 那么实际上这台机器有没有各种测评说的这么好呢。从我自己的实际使用感受来看，这些优点是基本属实的。但这不意味着这台机器没有缺点了，事实上这台机器的缺点还不少： 首先，很不能让人忍受一点的就是这台机器的C面非常的尖锐，握持起来很不舒服。其次，机器的键盘手感并没有一些测评里吹的那么好，虽然不算特别差，但击键的时候有时会出现卡键的情况。另外这台机器的接口布局也不很合理，右边单独放了一个孤零零的USB，左边把电源口，雷电3接口，USB口和耳机口一股脑儿放在一起，使用时很拥挤。只配一个Type-C接口也显得很小气，多配一个把电源口砍掉不好么。 没有指纹解锁也是让人很费解的，我个人并不喜欢面部解锁，但因为这个原因也不得不用。 在7月份左右的时候，掉盘了。虽然这台机器的SSD表现其实还是挺不错的，但这么快就掉盘实在是出乎我的意料。没办法，只能联系联想上门维修。其实就是想着找它们免费换块盘。 等来了工程师上门，换完硬盘重装了系统，发现触摸板又不工作了……一般这种情况我们都会想着去找驱动装上，结果联想自己的官网上找不到相关的驱动。这位联想工程师联系了自己的同事，说这款机器触摸板是免驱的，装上系统就能使用。结果他自己带来的系统又怎么装都不行……最后这位小哥问我之前的一次重装时用的是什么镜像，说要不你自己重装试试。弄得我也无语了…… 后来的解决方案是把我的机器拿回了维修站，重装了一次出厂系统。触摸板的问题总算解决了。但给我的感受就是联想内部管理挺混乱，虽然看起来他们自己有做移动端的知识库系统，但对自己新推的新机型的支持明显滞后。包括一开始这位工程师想用PE进去机器看一看硬盘情况，结果发现自己的PE在这台机器上无法使用，换了好几套才进去，也给人感觉对新机型不熟悉。这次售后算是解决了问题，但体验还是很糟糕的。包括这台机器本身也给人一种不安定感。 现在我也还在坚持用这台机器，因为这些缺点的存在，抵消了我对它优点的好感。用起来总是觉得不怎么舒服。并且因为触摸板的缘故，我现在只能继续用工作站重装的Win10家庭版，实在是痛苦。现在看来，最大的感悟可能就是：下次换机我不会再想着省钱了。","link":"/2020/09/04/lenovo-yoga-s740/"},{"title":"我搭静态博客","text":"动态博客其实一直以来都很吸引我。事实上不久之前，我还在自己的VPS上搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。 做出这个决定有一个重要的理由——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，我的目的也仅止于记录自己的一些想法和兴趣，不会有更大的野心。因此权衡下来我更倾向于选择一个具有性价比的方案。 话虽如此，并不代表静态博客就完美无缺。相反，一些在动态博客中根本不能称之为问题的问题，在静态博客上就得通过各种“奇技淫巧”来解决。 因此本文基于hexo聊一聊在搭建过程中需要注意的点，同类型的生成器如pelican在使用中基本上围绕的也都是这些问题。 自动化部署现在流行的做法通过Travis CI自动部署github page，基本上都遵循如下步骤： 新建一个username.github.io仓库，在github的Settings - Developer settings - Personal access tokens页面内为Travis CI新建一个github page专用，并赋予repo权限的access token； 使用github账号登陆Travis CI以完成账号关联，将access token作为GH_TOKEN加入到从github同步过去的仓库配置中，并在Travis CI中启用该仓库。 在本地安装npm、hexo。初始化hexo项目后，为本地项目添加.travis.yml，并完成_config.yml、.gitignore等相关配置； 为username.github.io新建一个source分支，将本地项目推送到这个source分支下。最终目的是让Travis CI根据source分支下.travis.yml中的设置的步骤生成静态文件，并把静态文件推送到username.github.io的master分支下。 这部分的教程其实相当多了，如1。在实际搭建时，可以根据自己的情况进行调整，并不需要照搬教程。 主题开发如果你使用了比较成熟的主题，但又希望做一些个性化的定制，比较好的一种方式是把这个主题fork到自己的github账号下。并在本地环境中拉取fork的主题。这样做之后，本地的开发环境将会有两个仓库： username.github.io的source分支 hexo-theme-themename的master分支 由于主题是一个独立分支，因此在自动部署时，一般会把source下的themes文件夹加入到这个分支的.gitignore里去，避免发生一些可能的修改冲突。 使用时，则通过在.travis.yml添加git clone命令引入主题并渲染，例如： 1234567before_script: - npm install -g hexo-cli - mkdir themes - git clone https://github.com/username/hexo-theme-themename.git themes/themenamescript: - hexo generate 评论服务选型对动态博客来说几乎属于标配的评论功能，在静态博客上就得通过各种奇奇怪怪的方案去实现，并且往往还并不完美。我目前使用的主题minos支持的几种评论服务，就各自存在一些缺点： disqus国内网络环境下的访问实在是太慢了，非常影响浏览体验。 一种方式是把disqus隐藏在一个按钮中，相当于用户只有在点击该评论按钮后才会加载disqus，属于一个治标不治本的方案。 如果坚持使用disqus，可以考虑参考2，但我个人感觉还是会有拖慢。 gitment/gitalk单独为这类评论服务建一个存放issue仓库倒还不是最麻烦的地方，最麻烦的是每篇博文好像都得手动加issue，虽然github也有网友写了脚本完成这一工作，但易用性还是大大降低了。 另外gitment已经停止更新，一些常见问题如object XMLHttpRequestProgressEvent、hexo上的开启失败等只能通过网友提供的各种方案加以解决，这一点也十分劝退我。 isso使用体验最好的一个，但并没有选用他。这实际上涉及的是一个理念问题：isso需要自行搭建，也就是说又得放在VPS上，那为什么不直接选用一个自带评论的动态博客方案呢，和我搭静态博客的出发点相矛盾。当然，对于不介意这点的朋友，这个服务还是推荐的。 valine目前这个博客上部署的方案，没有上面一些比较恶心的问题。但leancloud这个服务能坚持多久是比较让我担心的地方…… 综上所述，可以看到静态博客的评论实在是一大痛点。虽然有各种各样的解决方案，但始终只能算马马虎虎能用，难以达到动态博客的使用体验。 搜索引擎收录及SEO优化目前google的网址前缀收录的推荐方式是通过校验html来完成，步骤可参考5，SEO优化方面的文章也很多，如6，这里就不再赘述了。 小结完成这些内容后，你的静态博客相当于拥有了基本的功能。后续包括全站多语言支持、图片懒加载等等，都是可以持续优化的方面。 当然，对于一个博客来说，最重要的永远是内容。希望大家不要被各种花俏的技巧蒙蔽了双眼，为了搭博客而搭博客。而是通过搭博客培养兴趣和动手能力，在兴趣驱动下，继续分享自己的思考与创意","link":"/2020/05/27/the-way-I-build-a-static-blog/"},{"title":"JAV快捷跳转v0.28更新","text":"这次主要加入javbus的防屏蔽地址，去掉了失效的thisjav部分，最后根据网友fanza1的反馈修复了一个没有认真去复现的bug…… JAV快捷跳转这个用户脚本是去年写的，一直想重写来着，不过也抽不出时间。有时候也怀疑是不是只有我一个人在用（汗 虽然只是一个简陋的脚本，我本人的前端知识也很有限，但还是希望能继续优化下去。 下一步大概会加一到两个元数据相对完备的站进来，不过说实话我自己几乎只用bus了（笑","link":"/2020/07/04/video-search-through-javlibrary-v0_28/"},{"title":"JAV快捷跳转v0.29更新","text":"根据网友“蚍蜉”的需求，添加了JavBus，JAVLibrary，JavDB三个站点之间的互跳。 如果不是这次的需求，之前还真不知道有JavDB这个站。感觉这个站也不错，有好好把番号放在meta里，这样提取出来就方便多了。 还是多嘴解释一下这个用户脚本的用途： 它一开始的目的是希望在浏览JAVLibrary页面的时候，能够方便地通过点击链接或按钮的方式，跳转至类似JavBus、JavDB等站点的影片页面或搜索结果页面。从而省去单独访问这些站点之后再搜索番号的操作。 希望试用这个脚本的朋友可以戳这里。当然，在使用之前需要现在firefox上安装好Greasemonkey或Tampermonkey这类附加组件，这部分就不再赘述了。","link":"/2020/08/06/video-search-through-javlibrary-v0_29/"}],"tags":[{"name":"VPS","slug":"VPS","link":"/tags/VPS/"},{"name":"laptop","slug":"laptop","link":"/tags/laptop/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"userscript","slug":"userscript","link":"/tags/userscript/"}],"categories":[{"name":"coding","slug":"coding","link":"/categories/coding/"},{"name":"life","slug":"life","link":"/categories/life/"}]}