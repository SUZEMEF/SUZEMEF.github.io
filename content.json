{"pages":[{"title":"有的没的","text":"希望这次能坚持久一点。 你可以在这些地方找到我： github 建站历史 2020-09-04 哇，电脑重装之后又得搭一遍环境，好烦。 2020-08-27 字体加载有点问题，调优中…… 2020-05-26 调整minos配色及字体，如果你喜欢我修改的这个版本，欢迎fork。 2020-05-25 评论服务选用Valine。生成并提交sitemap以完成收录。 2020-05-24 完成初步搭建。主题使用minos，通过Travis CI完成自动化部署。 快捷跳转相关 安装 更新历史","link":"/about/index.html"}],"posts":[{"title":"acme.sh的Verify error:Invalid response from报错","text":"之前在hostdare购入过一台VPS，速度一般，所以拿来做备胎，乱七八糟部了一些服务在上面，考虑到最低限度的安全，用acme给每个服务都手动生成了一遍证书，还挺麻烦的（当时因为一些原因，通配符证书没能用起来……）。 其中最常用的一个自用服务是freshrss，今天访问时突然发现证书过期了，按说acme是可以自动续期的。查了一下acme.sh.log，报了一条这个错误： 1[Mon Aug 24 00:09:56 CST 2020] yousite.xyz:Verify error:Invalid response from https://yousite.xyz/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [*.*.*.*]: 404 说明acme是有在自动去更新证书的，但是到verify这一步时会通不过。查了一下，发现项目里面有一条issue：Verify error:Invalid response #132里有解答： 12345678910111213141516171819202122232425262728293031同样遇到这个问题，如果是nginx的话，一般是因为服务器拒绝访问，解决方法2个，都是为了获取访问权限：1.在include *.conf; 下方加入部分代码：server {listen 80;server_name yoursite.com www.yoursite.com;include *.conf; // 加入以下代码； location ^~ /.well-known/acme-challenge/ { default_type &quot;text/plain&quot;; root /home/wwwroot/yoursite; } location = /.well-known/acme-challenge/ { try_files $uri =404; } 2.在 yoursite.conf 中，把拒绝访问代码注释掉，如下： # location ~ /\\. # { # deny all; # } 我的nginx把各服务的配置单独放在了新建的\\etc\\nginx\\conf\\conf.d\\xxx.conf，所以这里location部分要放到xxx.conf下，后续要做的就是重新加载nginx的配置： 12cd /etc/nginx/sbin./nginx -s reload 为了验证配置是否生效，这里更新了一下acme之后做了一次证书手动更新。 123cd ~/.acme.sh/acme.sh --upgradeacme.sh --renew -d domain.com 这次签发成功了，于是又水了一贴（部分信息做了脱敏处理）……","link":"/2020/08/24/acme-verify-error/"},{"title":"抖音自动点赞","text":"因为一些主播会把点赞达到多少万作为一项指标，自己又懒得点，所以想把这个工作给自动化。 现在可以搜到的实现基本都是基于adb的，这是一个简陋的整合了相关资料的win下的教学。 其原理为：直接使用adb的点击事件速度会不够快，可以通过记录用户操作再输出的方式模拟在dy主播界面快速点击的行为。 下载一个安卓模拟器（本文使用夜神模拟器）并安装，完成安装后在模拟器内安装dy，登录已经关注主播的抖音账号，并进入直播页面 通过命令行进入nox_adb.exe所在目录（命令为默认安装位置）：cd “C:\\Program Files (x86)\\Nox\\bin&quot; 进入夜神模拟器的adb shell：nox_adb shell 进入shell后，准备记录输入操作到一个新建的recordtap文件内：dd if=/dev/input/event5 of=/sdcard/recordtap，具体是event5或其他（如event1等）可在shell中通过getevent命令查询 回到模拟器的直播页面，在屏幕上重复快速点击 退出adb shell（如快捷键无效，可关掉命令行窗口后重开） 重新进入adb shell，运行命令（此为循环100次版本）： for i in seq 1 100; do dd if=/sdcard/recordtap of=/dev/input/event5;sleep 0.1; done 多开时直接执行nox_adb shell会报 error: more than one device and emulator的错误，这时需要先nox_adb devices查看当前有设备与模拟器： C:\\Program Files (x86)\\Nox\\bin&gt;nox_adb devices List of devices attached 127.0.0.1:62025 device 127.0.0.1:62001 device 在执行adb命令时，为命令指定设备的序列号nox_adb -s 127.0.0.1:62025 shell 说明： 使用夜神安卓模拟器的ADB指令时，需要将adb改为nox_adb，如nox_adb devices对应adb devices，nox_adb shell对应adb shell。 参考： https://www.jianshu.com/p/7c565eab821d https://blog.csdn.net/gaojinshan/article/details/9455193 https://www.yeshen.com/faqs/ByPpRoflZ","link":"/2020/11/16/douyin-auto-thumbup/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/23/hello-world/"},{"title":"我搭静态博客","text":"动态博客其实一直以来都很吸引我。事实上不久之前，我还在自己的VPS上搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。 做出这个决定有一个重要的理由——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，我的目的也仅止于记录自己的一些想法和兴趣，不会有更大的野心。因此权衡下来我更倾向于选择一个具有性价比的方案。 话虽如此，并不代表静态博客就完美无缺。相反，一些在动态博客中根本不能称之为问题的问题，在静态博客上就得通过各种“奇技淫巧”来解决。 因此本文基于hexo聊一聊在搭建过程中需要注意的点，同类型的生成器如pelican在使用中基本上围绕的也都是这些问题。 自动化部署现在流行的做法通过Travis CI自动部署github page，基本上都遵循如下步骤： 新建一个username.github.io仓库，在github的Settings - Developer settings - Personal access tokens页面内为Travis CI新建一个github page专用，并赋予repo权限的access token； 使用github账号登陆Travis CI以完成账号关联，将access token作为GH_TOKEN加入到从github同步过去的仓库配置中，并在Travis CI中启用该仓库。 在本地安装npm、hexo。初始化hexo项目后，为本地项目添加.travis.yml，并完成_config.yml、.gitignore等相关配置； 为username.github.io新建一个source分支，将本地项目推送到这个source分支下。最终目的是让Travis CI根据source分支下.travis.yml中的设置的步骤生成静态文件，并把静态文件推送到username.github.io的master分支下。 这部分的教程其实相当多了，如1。在实际搭建时，可以根据自己的情况进行调整，并不需要照搬教程。 主题开发如果你使用了比较成熟的主题，但又希望做一些个性化的定制，比较好的一种方式是把这个主题fork到自己的github账号下。并在本地环境中拉取fork的主题。这样做之后，本地的开发环境将会有两个仓库： username.github.io的source分支 hexo-theme-themename的master分支 由于主题是一个独立分支，因此在自动部署时，一般会把source下的themes文件夹加入到这个分支的.gitignore里去，避免发生一些可能的修改冲突。 使用时，则通过在.travis.yml添加git clone命令引入主题并渲染，例如： 1234567before_script: - npm install -g hexo-cli - mkdir themes - git clone https://github.com/username/hexo-theme-themename.git themes/themenamescript: - hexo generate 评论服务选型对动态博客来说几乎属于标配的评论功能，在静态博客上就得通过各种奇奇怪怪的方案去实现，并且往往还并不完美。我目前使用的主题minos支持的几种评论服务，就各自存在一些缺点： disqus国内网络环境下的访问实在是太慢了，非常影响浏览体验。 一种方式是把disqus隐藏在一个按钮中，相当于用户只有在点击该评论按钮后才会加载disqus，属于一个治标不治本的方案。 如果坚持使用disqus，可以考虑参考2，但我个人感觉还是会有拖慢。 gitment/gitalk单独为这类评论服务建一个存放issue仓库倒还不是最麻烦的地方，最麻烦的是每篇博文好像都得手动加issue，虽然github也有网友写了脚本完成这一工作，但易用性还是大大降低了。 另外gitment已经停止更新，一些常见问题如object XMLHttpRequestProgressEvent、hexo上的开启失败等只能通过网友提供的各种方案加以解决，这一点也十分劝退我。 isso使用体验最好的一个，但并没有选用他。这实际上涉及的是一个理念问题：isso需要自行搭建，也就是说又得放在VPS上，那为什么不直接选用一个自带评论的动态博客方案呢，和我搭静态博客的出发点相矛盾。当然，对于不介意这点的朋友，这个服务还是推荐的。 valine目前这个博客上部署的方案，没有上面一些比较恶心的问题。但leancloud这个服务能坚持多久是比较让我担心的地方…… 综上所述，可以看到静态博客的评论实在是一大痛点。虽然有各种各样的解决方案，但始终只能算马马虎虎能用，难以达到动态博客的使用体验。 搜索引擎收录及SEO优化目前google的网址前缀收录的推荐方式是通过校验html来完成，步骤可参考5，SEO优化方面的文章也很多，如6，这里就不再赘述了。 小结完成这些内容后，你的静态博客相当于拥有了基本的功能。后续包括全站多语言支持、图片懒加载等等，都是可以持续优化的方面。 当然，对于一个博客来说，最重要的永远是内容。希望大家不要被各种花俏的技巧蒙蔽了双眼，为了搭博客而搭博客。而是通过搭博客培养兴趣和动手能力，在兴趣驱动下，继续分享自己的思考与创意","link":"/2020/05/27/the-way-I-build-a-static-blog/"},{"title":"Jav快捷跳转：历史版本","text":"为了便于直观的查看更新记录，今后会在这里维护一份Jav快捷跳转的Changelog。 Changelog[0.30] - 2020-09-09Fixed 修复了JavDB获取到错误番号的bug。 [0.29] - 2020-08-06Added 添加对JavDB的支持（需求来源： 蚍蜉）。 [0.28] - 2020-07-04Added 加入javbus的防屏蔽地址。 [0.27] - 2020-07-04Removed 去掉了失效的thisjav。 Fixed 根据fanza1的反馈除虫。 [0.26] - 2019-05-17Changed 调整JAVLibrary的跳转样式（需求:由 还没想好 于 2019-05-03 发表）。 [0.25] - 2019-03-03Added 添加JAVLibrary到JAV321的跳转。 [0.24] - 2019-02-28Added 增加Jav321到其他站点的跳转 [0.23] - 2019-02-24Added 增加从ThisJav影片页面跳转到对应影片在JavLibrary评分页面的链接。 Fixed 修复无法匹配p26y.com的bug。 [0.22] - 2019-02-22Added 增加从JavBus影片页面跳转到对应影片在JavLibrary评分页面的链接。 [0.21] - 2019-02-17Added 增加Sukubei支持。 [0.2] - 2019-02-17Changed 优化代码，调整显示效果及元属性，更新附加信息。 [0.1] - 2019-02-10Added 初始化","link":"/2020/09/27/video-search-through-javlibrary-change-log/"}],"tags":[{"name":"VPS","slug":"VPS","link":"/tags/VPS/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"userscript","slug":"userscript","link":"/tags/userscript/"}],"categories":[{"name":"coding","slug":"coding","link":"/categories/coding/"}]}